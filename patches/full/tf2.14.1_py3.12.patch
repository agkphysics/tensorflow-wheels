diff --git a/WORKSPACE b/WORKSPACE
index fb3af8a2bea..2da6530e5e5 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -14,11 +14,15 @@ http_archive(
 
 http_archive(
     name = "rules_python",
-    sha256 = "84aec9e21cc56fbc7f1335035a71c850d1b9b5cc6ff497306f84cced9a769841",
-    strip_prefix = "rules_python-0.23.1",
-    url = "https://github.com/bazelbuild/rules_python/releases/download/0.23.1/rules_python-0.23.1.tar.gz",
+    sha256 = "9d04041ac92a0985e344235f5d946f71ac543f1b1565f2cdbc9a2aaee8adf55b",
+    strip_prefix = "rules_python-0.26.0",
+    url = "https://github.com/bazelbuild/rules_python/releases/download/0.26.0/rules_python-0.26.0.tar.gz",
 )
 
+load("@rules_python//python:repositories.bzl", "py_repositories")
+
+py_repositories()
+
 load("@rules_python//python:repositories.bzl", "python_register_toolchains")
 load(
     "//tensorflow/tools/toolchains/python:python_repo.bzl",
@@ -59,6 +63,8 @@ pip_parse(
     annotations = NUMPY_ANNOTATIONS,
     python_interpreter_target = interpreter,
     requirements = "//:requirements_lock_" + HERMETIC_PYTHON_VERSION.replace(".", "_") + ".txt",
+    download_only = True,
+    extra_pip_args = ["--ignore-requires-python"],
 )
 
 load("@pypi//:requirements.bzl", "install_deps")
diff --git a/tensorflow/compiler/xla/python_api/BUILD b/tensorflow/compiler/xla/python_api/BUILD
index 6dddb9d6985..89264acfbf7 100644
--- a/tensorflow/compiler/xla/python_api/BUILD
+++ b/tensorflow/compiler/xla/python_api/BUILD
@@ -18,7 +18,6 @@ py_strict_library(
     visibility = ["//visibility:public"],
     deps = [
         "//tensorflow/compiler/xla:xla_data_proto_py",
-        "//tensorflow/tsl/python/lib/core:pywrap_ml_dtypes",
         "//third_party/py/numpy",
         "@ml_dtypes",
     ],
diff --git a/tensorflow/compiler/xla/python_api/types_.py b/tensorflow/compiler/xla/python_api/types_.py
index 9431333487f..ca71df48761 100644
--- a/tensorflow/compiler/xla/python_api/types_.py
+++ b/tensorflow/compiler/xla/python_api/types_.py
@@ -16,10 +16,10 @@
 
 import collections
 
+import ml_dtypes as _md # Avoids becoming a part of public Tensorflow API.
 import numpy as _np  # Avoids becoming a part of public Tensorflow API.
 
 from tensorflow.compiler.xla import xla_data_pb2
-from tensorflow.tsl.python.lib.core import pywrap_ml_dtypes
 
 # Records correspondence between a XLA primitive type and Python/Numpy types.
 #
@@ -37,84 +37,84 @@ TypeConversionRecord = collections.namedtuple('TypeConversionRecord', [
 
 # Maps from XLA primitive types to TypeConversionRecord.
 MAP_XLA_TYPE_TO_RECORD = {
-    xla_data_pb2.BF16:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.BF16,
-            numpy_dtype=pywrap_ml_dtypes.bfloat16(),
-            literal_field_name='bf16s',
-            literal_field_type=float),
-    xla_data_pb2.F16:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.F16,
-            numpy_dtype=_np.float16,
-            literal_field_name='f16s',
-            literal_field_type=float),
-    xla_data_pb2.F32:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.F32,
-            numpy_dtype=_np.float32,
-            literal_field_name='f32s',
-            literal_field_type=float),
-    xla_data_pb2.F64:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.F64,
-            numpy_dtype=_np.float64,
-            literal_field_name='f64s',
-            literal_field_type=float),
-    xla_data_pb2.S8:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.S8,
-            numpy_dtype=_np.int8,
-            literal_field_name='s8s',
-            literal_field_type=int),
-    xla_data_pb2.S16:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.S16,
-            numpy_dtype=_np.int16,
-            literal_field_name='s16s',
-            literal_field_type=int),
-    xla_data_pb2.S32:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.S32,
-            numpy_dtype=_np.int32,
-            literal_field_name='s32s',
-            literal_field_type=int),
-    xla_data_pb2.S64:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.S64,
-            numpy_dtype=_np.int64,
-            literal_field_name='s64s',
-            literal_field_type=int),
-    xla_data_pb2.U8:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.U8,
-            numpy_dtype=_np.uint8,
-            literal_field_name='s8s',
-            literal_field_type=int),
-    xla_data_pb2.U16:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.U16,
-            numpy_dtype=_np.uint16,
-            literal_field_name='s16s',
-            literal_field_type=int),
-    xla_data_pb2.U32:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.U32,
-            numpy_dtype=_np.uint32,
-            literal_field_name='s32s',
-            literal_field_type=int),
-    xla_data_pb2.U64:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.U64,
-            numpy_dtype=_np.uint64,
-            literal_field_name='s64s',
-            literal_field_type=int),
-    xla_data_pb2.PRED:
-        TypeConversionRecord(
-            primitive_type=xla_data_pb2.PRED,
-            numpy_dtype=_np.bool_,
-            literal_field_name='preds',
-            literal_field_type=bool)
+    xla_data_pb2.BF16: TypeConversionRecord(
+        primitive_type=xla_data_pb2.BF16,
+        numpy_dtype=_md.bfloat16,
+        literal_field_name='bf16s',
+        literal_field_type=float,
+    ),
+    xla_data_pb2.F16: TypeConversionRecord(
+        primitive_type=xla_data_pb2.F16,
+        numpy_dtype=_np.float16,
+        literal_field_name='f16s',
+        literal_field_type=float,
+    ),
+    xla_data_pb2.F32: TypeConversionRecord(
+        primitive_type=xla_data_pb2.F32,
+        numpy_dtype=_np.float32,
+        literal_field_name='f32s',
+        literal_field_type=float,
+    ),
+    xla_data_pb2.F64: TypeConversionRecord(
+        primitive_type=xla_data_pb2.F64,
+        numpy_dtype=_np.float64,
+        literal_field_name='f64s',
+        literal_field_type=float,
+    ),
+    xla_data_pb2.S8: TypeConversionRecord(
+        primitive_type=xla_data_pb2.S8,
+        numpy_dtype=_np.int8,
+        literal_field_name='s8s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.S16: TypeConversionRecord(
+        primitive_type=xla_data_pb2.S16,
+        numpy_dtype=_np.int16,
+        literal_field_name='s16s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.S32: TypeConversionRecord(
+        primitive_type=xla_data_pb2.S32,
+        numpy_dtype=_np.int32,
+        literal_field_name='s32s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.S64: TypeConversionRecord(
+        primitive_type=xla_data_pb2.S64,
+        numpy_dtype=_np.int64,
+        literal_field_name='s64s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.U8: TypeConversionRecord(
+        primitive_type=xla_data_pb2.U8,
+        numpy_dtype=_np.uint8,
+        literal_field_name='s8s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.U16: TypeConversionRecord(
+        primitive_type=xla_data_pb2.U16,
+        numpy_dtype=_np.uint16,
+        literal_field_name='s16s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.U32: TypeConversionRecord(
+        primitive_type=xla_data_pb2.U32,
+        numpy_dtype=_np.uint32,
+        literal_field_name='s32s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.U64: TypeConversionRecord(
+        primitive_type=xla_data_pb2.U64,
+        numpy_dtype=_np.uint64,
+        literal_field_name='s64s',
+        literal_field_type=int,
+    ),
+    xla_data_pb2.PRED: TypeConversionRecord(
+        primitive_type=xla_data_pb2.PRED,
+        numpy_dtype=_np.bool_,
+        literal_field_name='preds',
+        literal_field_type=bool,
+    ),
 }
 
 # Maps from Numpy dtypes to TypeConversionRecord.
diff --git a/tensorflow/python/BUILD b/tensorflow/python/BUILD
index c1b7eb7c0ea..7a5a07f65e8 100644
--- a/tensorflow/python/BUILD
+++ b/tensorflow/python/BUILD
@@ -607,7 +607,7 @@ py_strict_library(
 pywrap_tensorflow_macro(
     name = "pywrap_tensorflow_internal",
     srcs = ["pywrap_tensorflow_internal.cc"],
-    dynamic_deps = ["//tensorflow/tsl/python/lib/core:ml_dtypes.so"] + select({
+    dynamic_deps = select({
         "//tensorflow:macos": [
             "//tensorflow:libtensorflow_cc.%s.dylib" % VERSION,
             "//tensorflow:libtensorflow_framework.%s.dylib" % VERSION,
@@ -784,7 +784,7 @@ pywrap_tensorflow_macro(
         "//tensorflow/tools/graph_transforms:transform_graph_lib",
         "//tensorflow/tsl/profiler/rpc:profiler_server_impl",
         "//tensorflow/tsl/profiler/rpc/client:profiler_client_impl",
-        "//tensorflow/tsl/python/lib/core",
+        "//tensorflow/tsl/python/lib/core:numpy",
         "//third_party/python_runtime:headers",
         "@com_google_absl//absl/base",
         "@com_google_absl//absl/container:inlined_vector",
diff --git a/tensorflow/python/framework/BUILD b/tensorflow/python/framework/BUILD
index d8ce1f5c0bf..dce160c9ef9 100644
--- a/tensorflow/python/framework/BUILD
+++ b/tensorflow/python/framework/BUILD
@@ -1,5 +1,6 @@
 # python/framework package
 
+load("//tensorflow:pytype.default.bzl", "pytype_strict_library")
 load("//tensorflow:strict.default.bzl", "py_strict_library", "py_strict_test")
 load(
     "//tensorflow:tensorflow.bzl",
@@ -13,10 +14,9 @@ load(
     "tf_kernel_library",
 )
 load("//tensorflow:tensorflow.default.bzl", "cuda_py_strict_test", "tf_py_strict_test", "tf_python_framework_friends", "tf_python_pybind_extension")
-load("//tensorflow:pytype.default.bzl", "pytype_strict_library")
-load("//tensorflow/python/tpu:tpu.bzl", "tpu_py_strict_test")
 load("//tensorflow/core/platform:build_config.bzl", "pyx_library", "tf_additional_all_protos", "tf_additional_lib_deps", "tf_proto_library", "tf_protos_grappler")  # @unused
 load("//tensorflow/core/platform:build_config_root.bzl", "if_static", "tf_additional_xla_deps_py")
+load("//tensorflow/python/tpu:tpu.bzl", "tpu_py_strict_test")
 
 visibility = tf_python_framework_friends()
 
@@ -481,7 +481,6 @@ py_strict_library(
         "//tensorflow/python/types:doc_typealias",
         "//tensorflow/python/util:tf_export",
         "//tensorflow/tools/docs:doc_controls",
-        "//tensorflow/tsl/python/lib/core:pywrap_ml_dtypes",
         "@ml_dtypes",
     ],
 )
diff --git a/tensorflow/python/framework/dtypes.py b/tensorflow/python/framework/dtypes.py
index 9f17099424f..928db09e8da 100644
--- a/tensorflow/python/framework/dtypes.py
+++ b/tensorflow/python/framework/dtypes.py
@@ -18,6 +18,7 @@ import builtins
 import dataclasses
 from typing import Type, Sequence, Optional
 
+import ml_dtypes
 import numpy as np
 
 from tensorflow.core.framework import types_pb2
@@ -32,11 +33,10 @@ from tensorflow.python.util.tf_export import tf_export
 from tensorflow.python.types import trace
 from tensorflow.core.function import trace_type
 from tensorflow.tools.docs import doc_controls
-from tensorflow.tsl.python.lib.core import pywrap_ml_dtypes
 
-_np_bfloat16 = pywrap_ml_dtypes.bfloat16()
-_np_float8_e4m3fn = pywrap_ml_dtypes.float8_e4m3fn()
-_np_float8_e5m2 = pywrap_ml_dtypes.float8_e5m2()
+_np_bfloat16 = ml_dtypes.bfloat16
+_np_float8_e4m3fn = ml_dtypes.float8_e4m3fn
+_np_float8_e5m2 = ml_dtypes.float8_e5m2
 
 
 class DTypeMeta(type(_dtypes.DType), abc.ABCMeta):
diff --git a/tensorflow/python/lib/core/ndarray_tensor.cc b/tensorflow/python/lib/core/ndarray_tensor.cc
index db90e3745a8..b15955eea29 100644
--- a/tensorflow/python/lib/core/ndarray_tensor.cc
+++ b/tensorflow/python/lib/core/ndarray_tensor.cc
@@ -123,6 +123,8 @@ Status PyArrayDescr_to_TF_DataType(PyArray_Descr* descr,
 
 Status PyArray_TYPE_to_TF_DataType(PyArrayObject* array,
                                    TF_DataType* out_tf_datatype) {
+  const tsl::ml_dtypes::NumpyDtypes& custom_dtypes =
+      tsl::ml_dtypes::GetNumpyDtypes();
   int pyarray_type = PyArray_TYPE(array);
   PyArray_Descr* descr = PyArray_DESCR(array);
   switch (pyarray_type) {
@@ -181,7 +183,7 @@ Status PyArray_TYPE_to_TF_DataType(PyArrayObject* array,
       // custom struct type.
       return PyArrayDescr_to_TF_DataType(descr, out_tf_datatype);
     default:
-      if (pyarray_type == tsl::ml_dtypes::GetBfloat16TypeNum()) {
+      if (pyarray_type == custom_dtypes.bfloat16) {
         *out_tf_datatype = TF_BFLOAT16;
         break;
       } else if (pyarray_type == NPY_ULONGLONG) {
@@ -204,10 +206,10 @@ Status PyArray_TYPE_to_TF_DataType(PyArrayObject* array,
         // be different on certain platforms.
         *out_tf_datatype = TF_UINT32;
         break;
-      } else if (pyarray_type == tsl::ml_dtypes::GetFloat8E5m2TypeNum()) {
+      } else if (pyarray_type == custom_dtypes.float8_e5m2) {
         *out_tf_datatype = TF_FLOAT8_E5M2;
         break;
-      } else if (pyarray_type == tsl::ml_dtypes::GetFloat8E4m3fnTypeNum()) {
+      } else if (pyarray_type == custom_dtypes.float8_e4m3fn) {
         *out_tf_datatype = TF_FLOAT8_E4M3FN;
         break;
       }
diff --git a/tensorflow/python/lib/core/ndarray_tensor_bridge.cc b/tensorflow/python/lib/core/ndarray_tensor_bridge.cc
index d1e723c3955..8204e3ea828 100644
--- a/tensorflow/python/lib/core/ndarray_tensor_bridge.cc
+++ b/tensorflow/python/lib/core/ndarray_tensor_bridge.cc
@@ -119,6 +119,8 @@ PyTypeObject TensorReleaserType = {
 
 Status TF_DataType_to_PyArray_TYPE(TF_DataType tf_datatype,
                                    int* out_pyarray_type) {
+  const tsl::ml_dtypes::NumpyDtypes& custom_dtypes =
+      tsl::ml_dtypes::GetNumpyDtypes();
   switch (tf_datatype) {
     case TF_HALF:
       *out_pyarray_type = NPY_FLOAT16;
@@ -187,13 +189,13 @@ Status TF_DataType_to_PyArray_TYPE(TF_DataType tf_datatype,
       *out_pyarray_type = NPY_INT32;
       break;
     case TF_BFLOAT16:
-      *out_pyarray_type = tsl::ml_dtypes::GetBfloat16TypeNum();
+      *out_pyarray_type = custom_dtypes.bfloat16;
       break;
     case TF_FLOAT8_E5M2:
-      *out_pyarray_type = tsl::ml_dtypes::GetFloat8E5m2TypeNum();
+      *out_pyarray_type = custom_dtypes.float8_e5m2;
       break;
     case TF_FLOAT8_E4M3FN:
-      *out_pyarray_type = tsl::ml_dtypes::GetFloat8E4m3fnTypeNum();
+      *out_pyarray_type = custom_dtypes.float8_e4m3fn;
       break;
     default:
       return errors::Internal("Tensorflow type ", tf_datatype,
diff --git a/tensorflow/python/saved_model/save.py b/tensorflow/python/saved_model/save.py
index fd549eb2888..65671a5ebb4 100644
--- a/tensorflow/python/saved_model/save.py
+++ b/tensorflow/python/saved_model/save.py
@@ -13,6 +13,7 @@
 # limitations under the License.
 # ==============================================================================
 """Exports a SavedModel from a Trackable Python object."""
+from __future__ import annotations
 
 import collections
 import os
diff --git a/tensorflow/python/util/tf_export.py b/tensorflow/python/util/tf_export.py
index ade7504ca75..0c90d2e7ef2 100644
--- a/tensorflow/python/util/tf_export.py
+++ b/tensorflow/python/util/tf_export.py
@@ -37,6 +37,8 @@ foo = 1
 tf_export('consts.foo').export_constant(__name__, 'foo')
 ```
 """
+from __future__ import annotations
+
 from collections.abc import Sequence
 import functools
 import sys
diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
index 3e83bf61472..4443d11ef75 100644
--- a/tensorflow/tensorflow.bzl
+++ b/tensorflow/tensorflow.bzl
@@ -2471,11 +2471,6 @@ def pywrap_tensorflow_macro_opensource(
         cmd = "touch $@",
     )
 
-    # TODO(b/271333181): This should be done more generally on Windows for every dll dependency
-    # (there is only one currently) that is not in the same directory, otherwise Python will fail to
-    # link the pyd (which is just a dll) because of missing dependencies.
-    _create_symlink("ml_dtypes.so", "//tensorflow/tsl/python/lib/core:ml_dtypes.so")
-
     _plain_py_library(
         name = name,
         srcs = [":" + name + ".py"],
@@ -2483,8 +2478,6 @@ def pywrap_tensorflow_macro_opensource(
         data = select({
             clean_dep("//tensorflow:windows"): [
                 ":" + cc_library_pyd_name,
-                ":ml_dtypes.so",
-                "//tensorflow/tsl/python/lib/core:ml_dtypes.so",
             ],
             "//conditions:default": [
                 ":" + cc_shared_library_name,
diff --git a/tensorflow/tools/pip_package/build_pip_package.sh b/tensorflow/tools/pip_package/build_pip_package.sh
index 4a2d42bba58..0a2b959d4f2 100755
--- a/tensorflow/tools/pip_package/build_pip_package.sh
+++ b/tensorflow/tools/pip_package/build_pip_package.sh
@@ -162,12 +162,12 @@ function prepare_src() {
     cp -L \
       bazel-bin/tensorflow/tools/pip_package/build_pip_package.exe.runfiles/org_tensorflow/LICENSE \
       "${TMPDIR}"
-      
+
     # Change the format of file path (TMPDIR-->TMPDIR_rsync) which is input to the rsync from
-    # Windows-compatible to Linux-compatible to resolve the error below 
-    # error: ssh: Could not resolve hostname c: No such host is known. 
-    
-    TMPDIR_rsync=`cygpath $TMPDIR`  
+    # Windows-compatible to Linux-compatible to resolve the error below
+    # error: ssh: Could not resolve hostname c: No such host is known.
+
+    TMPDIR_rsync=`cygpath $TMPDIR`
     rsync -a \
       bazel-bin/tensorflow/tools/pip_package/build_pip_package.exe.runfiles/org_tensorflow/tensorflow \
       "${TMPDIR_rsync}"
@@ -236,26 +236,12 @@ function prepare_src() {
       bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/org_tensorflow \
       "${XLA_AOT_RUNTIME_SOURCES}"
     # Copy MKL libs over so they can be loaded at runtime
-    # TODO(b/271299337): shared libraries that depend on libml_dtypes.so.so have
-    # their NEEDED and RUNPATH set corresponding to a dependency on
-    # RUNFILES/_solib_local/libtensorflow_Stsl_Spython_Slib_Score_Slibml_dtypes.so.so,
-    # which is a symlink to tensorflow/tsl/python/lib/core/libml_dtypes.so in
-    # the Bazel build tree. We do not export the file in _solib_local (nor
-    # symlinks in general, I think Python wheels have poor support for them?)
     so_lib_dir=$(ls $RUNFILES | grep solib)
     if is_macos; then
-      chmod +rw ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so
       chmod +rw ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so
-      install_name_tool -change "@loader_path/../../../../../${so_lib_dir}//libtensorflow_Stsl_Spython_Slib_Score_Slibml_Udtypes.so.dylib" "@loader_path/libml_dtypes.so.dylib" ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so
-      install_name_tool -change "@loader_path/../../${so_lib_dir}//libtensorflow_Stsl_Spython_Slib_Score_Slibml_Udtypes.so.dylib" "@loader_path/../tsl/python/lib/core/libml_dtypes.so.dylib" ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so
     else
-      chmod +rw ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so
       chmod +rw ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so
-      patchelf --replace-needed libtensorflow_Stsl_Spython_Slib_Score_Slibml_Udtypes.so.so libml_dtypes.so.so ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so
-      patchelf --replace-needed libtensorflow_Stsl_Spython_Slib_Score_Slibml_Udtypes.so.so libml_dtypes.so.so ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so
-      patchelf --set-rpath $(patchelf --print-rpath ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so):\$ORIGIN ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so
       patchelf --set-rpath $(patchelf --print-rpath ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so):\$ORIGIN/../tsl/python/lib/core ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so
-      patchelf --shrink-rpath ${TMPDIR}/tensorflow/tsl/python/lib/core/pywrap_ml_dtypes.so
       patchelf --shrink-rpath ${TMPDIR}/tensorflow/python/_pywrap_tensorflow_internal.so
     fi
     mkl_so_dir=$(ls ${RUNFILES}/${so_lib_dir} | grep mkl) || true
@@ -325,7 +311,7 @@ function build_wheel() {
     FULL_DIR="$(real_path "$PY_DIR")/bin/python3"
     export PYTHONPATH="$PYTHONPATH:$PWD/bazel-bin/tensorflow/tools/pip_package/build_pip_package.runfiles/pypi_wheel/site-packages/"
   fi
-  
+
   pushd ${TMPDIR} > /dev/null
 
   rm -f MANIFEST
diff --git a/tensorflow/tools/pip_package/setup.py b/tensorflow/tools/pip_package/setup.py
index fdb718d1628..de078ce9e21 100644
--- a/tensorflow/tools/pip_package/setup.py
+++ b/tensorflow/tools/pip_package/setup.py
@@ -89,7 +89,7 @@ REQUIRED_PACKAGES = [
     'google_pasta >= 0.1.1',
     'h5py >= 2.9.0',
     'libclang >= 13.0.0',
-    'ml_dtypes == 0.2.0',
+    'ml_dtypes >= 0.2.0',
     'numpy >= 1.23.5, < 2.0.0',
     'opt_einsum >= 2.3.2',
     'packaging',
@@ -102,7 +102,7 @@ REQUIRED_PACKAGES = [
     'termcolor >= 1.1.0',
     'typing_extensions >= 3.6.6',
     'wrapt >= 1.11.0, < 1.15',
-    'tensorflow-io-gcs-filesystem >= 0.23.1',
+    'tensorflow-io-gcs-filesystem >= 0.23.1 ; python_version < "3.12"',
     # grpcio does not build correctly on big-endian machines due to lack of
     # BoringSSL support.
     # See https://github.com/tensorflow/tensorflow/issues/17882.
@@ -389,7 +389,7 @@ setup(
     # Add in any packaged data.
     zip_safe=False,
     # Supported Python versions
-    python_requires='>=3.9',
+    python_requires='>=3.8',
     # PyPI package information.
     classifiers=sorted([
         'Development Status :: 5 - Production/Stable',
diff --git a/tensorflow/tools/toolchains/python/python_repo.bzl b/tensorflow/tools/toolchains/python/python_repo.bzl
index 61a45964649..0a98e120e3a 100644
--- a/tensorflow/tools/toolchains/python/python_repo.bzl
+++ b/tensorflow/tools/toolchains/python/python_repo.bzl
@@ -4,7 +4,7 @@ Can be set via build parameter "--repo_env=TF_PYTHON_VERSION=3.10"
 Defaults to 3.10.
 """
 
-VERSIONS = ["3.9", "3.10", "3.11"]
+VERSIONS = ["3.8", "3.9", "3.10", "3.11", "3.12"]
 DEFAULT_VERSION = "3.10"
 WARNING = """
 TF_PYTHON_VERSION variable was not set correctly, using default version. {} Python
diff --git a/tensorflow/tsl/python/lib/core/BUILD b/tensorflow/tsl/python/lib/core/BUILD
index 9b7cc3fb001..c0b9773d96e 100644
--- a/tensorflow/tsl/python/lib/core/BUILD
+++ b/tensorflow/tsl/python/lib/core/BUILD
@@ -1,18 +1,10 @@
 # Description:
 # Implementation of custom numpy floats.
-load("//tensorflow/tsl:tsl.bzl", "if_windows")
-load("//tensorflow/tsl:tsl.default.bzl", "tsl_pybind_extension")
-load("//tensorflow/tsl/platform:rules_cc.bzl", "cc_shared_library")
-
 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
     default_visibility = [
         "//visibility:public",
     ],
-    features = [
-        # For ml_dtypes.so (see b/259896740)
-        "windows_export_all_symbols",
-    ],
     licenses = ["notice"],
 )
 
@@ -36,10 +28,15 @@ cc_library(
     hdrs = [
         "ml_dtypes.h",
     ],
+    copts = ["-fexceptions"], # Required for pybind11.
     # Requires data dependency in order to load py module from C++.
     data = [
         "@ml_dtypes",
     ],
+    features = [
+        "-use_header_modules",  # Required for pybind11.
+        "-parse_headers",
+    ],
     deps = [
         "//tensorflow/tsl/python/lib/core:numpy",
         "//third_party/python_runtime:headers",  # build_cleaner: keep; DNR: b/35864863
@@ -73,40 +70,6 @@ cc_library(
     ],
 )
 
-cc_shared_library(
-    name = "ml_dtypes.so",
-    roots = [":ml_dtypes_lib"],
-    # TODO(tlongeri): If this is not explicitly specified, dependent DLLs will expect "ml_dtypes.so"
-    # and we will generate "ml_dtypes.so.dll", for some reason
-    shared_lib_name = if_windows("ml_dtypes.so", None),
-    static_deps = [
-        # TODO(ddunleavy): If cc_shared_library is ever not a noop in g3, change
-        # this to be more specific.
-        "//:__subpackages__",
-        "@//:__subpackages__",
-        "@com_google_absl//:__subpackages__",
-        "@local_config_python//:__subpackages__",
-        "@pybind11//:__subpackages__",
-        "@nsync//:__subpackages__",
-    ],
-)
-
-tsl_pybind_extension(
-    name = "pywrap_ml_dtypes",
-    srcs = ["ml_dtypes_wrapper.cc"],
-    dynamic_deps = [":ml_dtypes.so"],
-    static_deps = [
-        "@//:__subpackages__",
-        "@pybind11//:__subpackages__",
-        "@local_config_python//:__subpackages__",
-    ],
-    deps = [
-        ":ml_dtypes_lib",
-        "//third_party/python_runtime:headers",
-        "@pybind11",
-    ],
-)
-
 cc_library(
     name = "numpy",
     srcs = ["numpy.cc"],
@@ -116,12 +79,3 @@ cc_library(
         "//third_party/python_runtime:headers",
     ],
 )
-
-# Directory-level target.
-cc_library(
-    name = "core",
-    deps = [
-        ":ml_dtypes_lib",
-        ":numpy",
-    ],
-)
diff --git a/tensorflow/tsl/python/lib/core/ml_dtypes.cc b/tensorflow/tsl/python/lib/core/ml_dtypes.cc
index 38fe7baf8b5..036b80c5596 100644
--- a/tensorflow/tsl/python/lib/core/ml_dtypes.cc
+++ b/tensorflow/tsl/python/lib/core/ml_dtypes.cc
@@ -13,150 +13,37 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-// The following headers need to be included in a specific order because of
-// the numpy.h and Python.h headers.
-// clang-format off
-// NOLINTBEGIN
-// Must be included first
-#include "tensorflow/tsl/python/lib/core/numpy.h"
-
-#include <locale>
-#include <memory>
-// Place `<locale>` before <Python.h> to avoid a build failure in macOS.
-#include <Python.h>
-
 #include "tensorflow/tsl/python/lib/core/ml_dtypes.h"
-// NOLINTEND
-// clang-format on
+
+#include "pybind11/numpy.h"  // from @pybind11
+#include "pybind11/pybind11.h"  // from @pybind11
 
 namespace tsl {
 namespace ml_dtypes {
 
-namespace {
-
-struct PyDecrefDeleter {
-  void operator()(PyObject* p) const { Py_DECREF(p); }
-};
-
-using Safe_PyObjectPtr = std::unique_ptr<PyObject, PyDecrefDeleter>;
-Safe_PyObjectPtr make_safe(PyObject* object) {
-  return Safe_PyObjectPtr(object);
-}
-
-struct FloatTypes {
-  PyObject* bfloat16 = nullptr;
-  PyObject* float8_e4m3fn = nullptr;
-  PyObject* float8_e4m3b11fnuz = nullptr;
-  PyObject* float8_e5m2 = nullptr;
-
-  int bfloat16_num = -1;
-  int float8_e4m3fn_num = -1;
-  int float8_e4m3b11fnuz_num = -1;
-  int float8_e5m2_num = -1;
-
-  bool initialized = false;
-};
-
-FloatTypes float_types_;  // Protected by the GIL.
-
-bool Initialize() {
-  if (float_types_.initialized) {
-    return true;
-  }
-
-  auto init = []() {
-    tsl::ImportNumpy();
-    import_umath1(false);
-
-    Safe_PyObjectPtr numpy_str = make_safe(PyUnicode_FromString("numpy"));
-    if (!numpy_str) {
-      return false;
-    }
-    Safe_PyObjectPtr numpy = make_safe(PyImport_Import(numpy_str.get()));
-    if (!numpy) {
-      return false;
-    }
-
-    Safe_PyObjectPtr ml_dtypes_str =
-        make_safe(PyUnicode_FromString("ml_dtypes"));
-    if (!ml_dtypes_str) {
-      return false;
-    }
-    Safe_PyObjectPtr ml_dtypes =
-        make_safe(PyImport_Import(ml_dtypes_str.get()));
-    if (!ml_dtypes) {
-      return false;
-    }
-    float_types_.bfloat16 = PyObject_GetAttrString(ml_dtypes.get(), "bfloat16");
-    if (!float_types_.bfloat16) {
-      return false;
-    }
-    float_types_.float8_e4m3fn =
-        PyObject_GetAttrString(ml_dtypes.get(), "float8_e4m3fn");
-    if (!float_types_.float8_e4m3fn) {
-      return false;
-    }
-    float_types_.float8_e4m3b11fnuz =
-        PyObject_GetAttrString(ml_dtypes.get(), "float8_e4m3b11");
-    if (!float_types_.float8_e4m3b11fnuz) {
-      return false;
-    }
-    float_types_.float8_e5m2 =
-        PyObject_GetAttrString(ml_dtypes.get(), "float8_e5m2");
-    if (!float_types_.float8_e5m2) {
-      return false;
-    }
-
-    float_types_.bfloat16_num = PyArray_TypeNumFromName("bfloat16");
-    if (float_types_.bfloat16_num == NPY_NOTYPE) {
-      return false;
-    }
-    float_types_.float8_e4m3fn_num = PyArray_TypeNumFromName("float8_e4m3fn");
-    if (float_types_.float8_e4m3fn_num == NPY_NOTYPE) {
-      return false;
-    }
-    float_types_.float8_e4m3b11fnuz_num =
-        PyArray_TypeNumFromName("float8_e4m3b11fnuz");
-    if (float_types_.float8_e4m3b11fnuz_num == NPY_NOTYPE) {
-      return false;
-    }
-    float_types_.float8_e5m2_num = PyArray_TypeNumFromName("float8_e5m2");
-    if (float_types_.float8_e5m2_num == NPY_NOTYPE) {
-      return false;
-    }
-    float_types_.initialized = true;
-    return true;
-  };
-  if (float_types_.initialized) {
-    return true;
-  }
-  bool ok = init();
-  if (!ok) {
-    if (!PyErr_Occurred()) {
-      PyErr_SetString(PyExc_RuntimeError, "cannot load ml_dtypes module.");
-    }
-    PyErr_Print();
-  }
-  return ok;
-}
-
-}  // namespace
-
-bool RegisterTypes() { return Initialize(); }
-
-PyObject* GetBfloat16Dtype() { return float_types_.bfloat16; }
-PyObject* GetFloat8E4m3b11fnuzDtype() {
-  return float_types_.float8_e4m3b11fnuz;
-}
-PyObject* GetFloat8E4m3fnDtype() { return float_types_.float8_e4m3fn; }
-PyObject* GetFloat8E5m2Dtype() { return float_types_.float8_e5m2; }
-
-int GetBfloat16TypeNum() { return float_types_.bfloat16_num; }
-int GetFloat8E4m3b11fnuzTypeNum() {
-  return float_types_.float8_e4m3b11fnuz_num;
+namespace py = pybind11;
+
+const NumpyDtypes& GetNumpyDtypes() {
+  static const NumpyDtypes* numpy_dtypes = []() {
+    py::module ml_dtypes = py::module::import("ml_dtypes");
+    NumpyDtypes* dtypes = new NumpyDtypes();
+    dtypes->bfloat16 = py::dtype::from_args(ml_dtypes.attr("bfloat16")).num();
+    dtypes->float8_e4m3fn =
+        py::dtype::from_args(ml_dtypes.attr("float8_e4m3fn")).num();
+    dtypes->float8_e5m2 =
+        py::dtype::from_args(ml_dtypes.attr("float8_e5m2")).num();
+    dtypes->float8_e4m3b11fnuz =
+        py::dtype::from_args(ml_dtypes.attr("float8_e4m3b11fnuz")).num();
+    dtypes->float8_e4m3fnuz =
+        py::dtype::from_args(ml_dtypes.attr("float8_e4m3fnuz")).num();
+    dtypes->float8_e5m2fnuz =
+        py::dtype::from_args(ml_dtypes.attr("float8_e5m2fnuz")).num();
+    dtypes->int4 = py::dtype::from_args(ml_dtypes.attr("int4")).num();
+    dtypes->uint4 = py::dtype::from_args(ml_dtypes.attr("uint4")).num();
+    return dtypes;
+  }();
+  return *numpy_dtypes;
 }
-int GetFloat8E4m3fnTypeNum() { return float_types_.float8_e4m3fn_num; }
-int GetFloat8E5m2TypeNum() { return float_types_.float8_e5m2_num; }
 
 }  // namespace ml_dtypes
 }  // namespace tsl
diff --git a/tensorflow/tsl/python/lib/core/ml_dtypes.h b/tensorflow/tsl/python/lib/core/ml_dtypes.h
index 6e7efcaaf36..6164901d0a7 100644
--- a/tensorflow/tsl/python/lib/core/ml_dtypes.h
+++ b/tensorflow/tsl/python/lib/core/ml_dtypes.h
@@ -16,28 +16,32 @@ limitations under the License.
 #ifndef TENSORFLOW_TSL_PYTHON_LIB_CORE_ML_DTYPES_H_
 #define TENSORFLOW_TSL_PYTHON_LIB_CORE_ML_DTYPES_H_
 
-// Registers all custom types from the python ml_dtypes.py package.
+// Registers all custom types from the python ml_dtypes package.
 //   https://github.com/jax-ml/ml_dtypes
 
-#include <Python.h>
-
 namespace tsl {
 namespace ml_dtypes {
 
-// Register all ml dtypes.
-bool RegisterTypes();
-
-// Return a pointer to the numpy dtype objects.
-PyObject* GetBfloat16Dtype();
-PyObject* GetFloat8E4m3b11fnuzDtype();
-PyObject* GetFloat8E4m3fnDtype();
-PyObject* GetFloat8E5m2Dtype();
-
-// Returns the type id number of the numpy type.
-int GetBfloat16TypeNum();
-int GetFloat8E4m3b11fnuzTypeNum();
-int GetFloat8E4m3fnTypeNum();
-int GetFloat8E5m2TypeNum();
+struct NumpyDtypes {
+  int bfloat16;
+  int float8_e4m3fn;
+  int float8_e4m3b11fnuz;
+  int float8_e4m3fnuz;
+  int float8_e5m2;
+  int float8_e5m2fnuz;
+  int int4;
+  int uint4;
+};
+
+const NumpyDtypes& GetNumpyDtypes();
+
+// Deprecated: no longer required, but is currently heavily used.
+inline bool RegisterTypes() {
+  GetNumpyDtypes();
+  return true;
+}
+
+inline int GetBfloat16TypeNum() { return GetNumpyDtypes().bfloat16; }
 
 }  // namespace ml_dtypes
 }  // namespace tsl
diff --git a/tensorflow/tsl/python/lib/core/ml_dtypes_wrapper.cc b/tensorflow/tsl/python/lib/core/ml_dtypes_wrapper.cc
deleted file mode 100644
index b0f51659d2b..00000000000
--- a/tensorflow/tsl/python/lib/core/ml_dtypes_wrapper.cc
+++ /dev/null
@@ -1,31 +0,0 @@
-/* Copyright 2019 The TensorFlow Authors. All Rights Reserved.
-
-Licensed under the Apache License, Version 2.0 (the "License");
-you may not use this file except in compliance with the License.
-You may obtain a copy of the License at
-
-    http://www.apache.org/licenses/LICENSE-2.0
-
-Unless required by applicable law or agreed to in writing, software
-distributed under the License is distributed on an "AS IS" BASIS,
-WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-See the License for the specific language governing permissions and
-limitations under the License.
-==============================================================================*/
-
-#include "pybind11/pybind11.h"  // from @pybind11
-#include "tensorflow/tsl/python/lib/core/ml_dtypes.h"
-
-PYBIND11_MODULE(pywrap_ml_dtypes, m) {
-  tsl::ml_dtypes::RegisterTypes();
-  m.def("bfloat16",
-        [] { return pybind11::handle(tsl::ml_dtypes::GetBfloat16Dtype()); });
-  m.def("float8_e4m3b11fnuz", [] {
-    return pybind11::handle(tsl::ml_dtypes::GetFloat8E4m3b11fnuzDtype());
-  });
-  m.def("float8_e4m3fn", [] {
-    return pybind11::handle(tsl::ml_dtypes::GetFloat8E4m3fnDtype());
-  });
-  m.def("float8_e5m2",
-        [] { return pybind11::handle(tsl::ml_dtypes::GetFloat8E5m2Dtype()); });
-}
diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 3456b20b7e7..7f02be45ae8 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -713,10 +713,10 @@ def _tf_repositories():
     tf_http_archive(
         name = "cython",
         build_file = "//third_party:cython.BUILD",
-        sha256 = "08dbdb6aa003f03e65879de8f899f87c8c718cd874a31ae9c29f8726da2f5ab0",
-        strip_prefix = "cython-3.0.0a11",
+        sha256 = "0c2eae8a4ceab7955be1e11a4ddc5dcc3aa06ce22ad594262f1555b9d10667f0",
+        strip_prefix = "cython-3.0.3",
         system_build_file = "//third_party/systemlibs:cython.BUILD",
-        urls = tf_mirror_urls("https://github.com/cython/cython/archive/3.0.0a11.tar.gz"),
+        urls = tf_mirror_urls("https://github.com/cython/cython/archive/3.0.3.tar.gz"),
     )
 
     # LINT.IfChange
diff --git a/third_party/gpus/find_cuda_config.py b/third_party/gpus/find_cuda_config.py
index d24d325c706..5a236c5e6ac 100644
--- a/third_party/gpus/find_cuda_config.py
+++ b/third_party/gpus/find_cuda_config.py
@@ -121,7 +121,7 @@ def _at_least_version(actual_version, required_version):
 def _get_header_version(path, name):
   """Returns preprocessor defines in C header file."""
   for line in io.open(path, "r", encoding="utf-8").readlines():
-    match = re.match("\s*#\s*define %s\s+(\d+)" % name, line)
+    match = re.match(r"\s*#\s*define %s\s+(\d+)" % name, line)
     if match:
       return match.group(1)
   return ""
@@ -260,7 +260,7 @@ def _find_cuda_config(base_paths, required_version):
   cuda_library_path = _find_library(base_paths, "cudart", cuda_version)
 
   def get_nvcc_version(path):
-    pattern = "Cuda compilation tools, release \d+\.\d+, V(\d+\.\d+\.\d+)"
+    pattern = r"Cuda compilation tools, release \d+\.\d+, V(\d+\.\d+\.\d+)"
     for line in subprocess.check_output([path, "--version"]).splitlines():
       match = re.match(pattern, line.decode("ascii"))
       if match:
@@ -549,7 +549,7 @@ def _get_legacy_path(env_name, default=[]):
   paths. Detect those and return '/usr', otherwise forward to _list_from_env().
   """
   if env_name in os.environ:
-    match = re.match("^(/[^/ ]*)+/lib/\w+-linux-gnu/?$", os.environ[env_name])
+    match = re.match(r"^(/[^/ ]*)+/lib/\w+-linux-gnu/?$", os.environ[env_name])
     if match:
       return [match.group(1)]
   return _list_from_env(env_name, default)
diff --git a/third_party/gpus/find_cuda_config.py.gz.base64 b/third_party/gpus/find_cuda_config.py.gz.base64
index b798e99cc51..916fd9f2f83 100644
--- a/third_party/gpus/find_cuda_config.py.gz.base64
+++ b/third_party/gpus/find_cuda_config.py.gz.base64
@@ -1 +1 @@
-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
\ No newline at end of file
+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
\ No newline at end of file
